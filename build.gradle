plugins {
	id 'java' 
	id "org.beryx.jlink" version "2.21.2"
	id "org.javamodularity.moduleplugin" version "1.7.0"
	id "org.sonarqube" version "3.2.0"
}

sonarqube {
  properties {
    property "sonar.projectKey", "optyfr_Jtrrntzip"
    property "sonar.organization", "optyfr"
    property "sonar.host.url", "https://sonarcloud.io"
  }
}

apply plugin: 'java'
sourceCompatibility = 11
targetCompatibility = 11
apply plugin: 'eclipse'
apply plugin: 'org.javamodularity.moduleplugin'

def props = new Properties()
file("dist/ver.properties").withInputStream { props.load(it) }

version = props.getProperty("Specification-Version")+props.getProperty("Implementation-Version")

repositories {
	mavenCentral()
}

java {
	modularity.inferModulePath.set(true)
}

dependencies {
	implementation group: 'commons-codec', name: 'commons-codec', version: '1.+'
	implementation group: 'commons-io', name: 'commons-io', version: '2.+'
	implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.+'
}


sourceSets {
    main {
        java {
            srcDirs = ["src"]
        }
        resources {
            srcDirs = ["src"]
        }
    }
}

jar {
	manifest {
		attributes(
			"Manifest-Version"     : "1.0",
		    "Specification-Title"  : "Jtrrntzip",
		    "Specification-Version": props.getProperty("Specification-Version"),
        	"Implementation-Title" : "JTrrntzip",
            "Implementation-Version" : props.getProperty("Implementation-Version"),
            "Main-Class"           : "JTrrntzip.Program",
            "Class-Path"           : configurations.compileClasspath.collect { 'lib/' + it.getName() }.join(' ')
		)
		archiveFileName = project.archivesBaseName + '.jar'
	}
}

task distZip2(type: Zip, dependsOn: jar) {
	from (configurations.compileClasspath) {
		into('lib')
	}
	from (jar)
	from ('dist') {
		include '*.bat'
		include '*.sh'
		fileMode = 0755
	}
	archiveFileName = project.archivesBaseName + '-' + project.version + '.zip'
	destinationDirectory = file("$buildDir/distributions/")
}

assemble.dependsOn distZip2
